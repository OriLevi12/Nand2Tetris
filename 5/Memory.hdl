// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */

/**
 * 1️ RAM (0x0000 - 0x3FFF) → 0 - 16383
 * ---------------------------------------
 *   - Binary:       000 0000 0000 0000  →  011 1111 1111 1111
 *   - Decimal:      0 → 16383
 *   - Hexadecimal:  0x0000 → 0x3FFF
 *
 * Screen Memory (0x4000 - 0x5FFF) → 16384 - 24575
 * ---------------------------------------------------
 *   - Binary:       100 0000 0000 0000  →  101 1111 1111 1111
 *   - Decimal:      16384 → 24575
 *   - Hexadecimal:  0x4000 → 0x5FFF
 *
 * Keyboard Memory (0x6000) → 24576
 * -----------------------------------
 *   - Binary:       110 0000 0000 0000
 *   - Decimal:      24576
 *   - Hexadecimal:  0x6000
 *  Invalid Memory Addresses (0x6001 and beyond) → 24577+
 * ----------------------------------------------------------
 *   - Binary:       110 0000 0000 0001  and beyond
 *   - Decimal:      24577+
 *   - Hexadecimal:  0x6001+
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
	// --- Address Decoding & Load Handling ---
    DMux4Way(in=load, sel=address[13..14], a=ramA, b=ramB, c=screenLoad, d=keyboardEnable);
    Or(a=ramA, b=ramB, out=ramLoad); // Ensures RAM works for both `00` and `01`

    // --- Memory Components ---
    RAM16K(in=in, load=ramLoad, address=address[0..13], out=ramOut);
    Screen(in=in, load=screenLoad, address=address[0..12], out=screenOut);
    Keyboard(out=keyboardOut);

    // --- Output Selection ---
    Mux4Way16(a=ramOut,b=ramOut,c=screenOut,d=keyboardOut,sel=address[13..14],out=out);
}
